name: OTA Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 1.2.3)'
        required: true
      notes:
        description: "What's new (release notes, Markdown supported)"
        required: true

jobs:
  release-linux:
    name: Build and archive (Linux)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.bump.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Update package version (local only)
        id: bump
        env:
          NEW_VERSION: ${{ github.event.inputs.version }}
        run: |
          npm version --no-git-tag-version "$NEW_VERSION"
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create tag via GitHub API
        uses: actions/github-script@v7
        env:
          NEW_VERSION: ${{ steps.bump.outputs.version }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = process.env.NEW_VERSION
            const tag = `v${version}`
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: context.sha,
              })
              core.info(`Created tag ${tag}`)
            } catch (e) {
              core.warning(`Tag create skipped: ${e.message}`)
            }

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build
        env:
          CI: false
          DISABLE_ESLINT_PLUGIN: true

      - name: Build installers (Linux)
        env:
          ELECTRON_BUILDER_MAX_CONCURRENCY: 1
        run: |
          npx electron-builder --linux deb --config.extraMetadata.version=${{ steps.bump.outputs.version }} --publish never

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installers-linux
          path: dist/**/*

  release-macos:
    name: Build and archive (macOS)
    runs-on: macos-latest
    needs: release-linux
    permissions:
      contents: write
    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.release-linux.outputs.version }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build
        env:
          CI: false
          DISABLE_ESLINT_PLUGIN: true

      - name: Build installers (macOS)
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          ELECTRON_BUILDER_MAX_CONCURRENCY: 1
        run: |
          npx electron-builder --mac dmg zip --config.extraMetadata.version=${{ needs.release-linux.outputs.version }} --publish never

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installers-macos
          path: dist/**/*

  release-windows:
    name: Build and archive (Windows)
    runs-on: windows-latest
    needs: release-linux
    permissions:
      contents: write
    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.release-linux.outputs.version }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build
        env:
          CI: false
          DISABLE_ESLINT_PLUGIN: true

      - name: Build installers (Windows)
        env:
          ELECTRON_BUILDER_MAX_CONCURRENCY: 1
        run: |
          npx electron-builder --win nsis msi portable --config.extraMetadata.version=${{ needs.release-linux.outputs.version }} --publish never

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installers-windows
          path: dist/**/*

  finalize-release:
    name: Publish Release with assets
    runs-on: ubuntu-latest
    needs: [release-linux, release-macos, release-windows]
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-all
          merge-multiple: true

      - name: Create or update GitHub Release with notes and assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.release-linux.outputs.version }}
          name: Moowi Installer v${{ needs.release-linux.outputs.version }}
          body: ${{ github.event.inputs.notes }}
          files: |
            dist-all/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 